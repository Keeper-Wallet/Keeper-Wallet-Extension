import { NetworkName } from 'networks/types';
import { SwapVendor } from 'swap/constants';

export const assetIds: Record<NetworkName, Record<string, string>> = {
  mainnet: {
    WAVES: 'WAVES',
    BAG: 'Euz5HtYcj3nVTZxppA7wdabwTe5BzHFiu4QG1EJtzeUx',
    BCH: 'zMFqXuoyrn5w17PFurTqxB7GsS71fp9dfk6XFwxbPCy',
    BNB: '5UYBPpq4WoU5n4MwpFkgJnW3Fq4B1u3ukpK33ik4QerR',
    BNT: 'F81SdfzBZr5ce8JArRWLPJEDg1V8yT257ohbcHk75yCp',
    BSV: '62LyMjcr2DtiyF5yVXFhoQ2q414VPPJXjsNYp72SuDCH',
    BTC: '8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS',
    BUSD: '8DLiYZjo3UUaRBTHU7Ayoqg4ihwb6YH1AfXrrhdjQ7K1',
    CGU: 'HK72uehJjkM22phZ5wHhBYxprP3r41eYtk9fYu5uetne',
    CRV: '3KhNcHo4We1G5EWps7b1e5DTdLgWDzctc8S6ynu37KAb',
    DAI: '8zUYbdB8Q6mDhpcXYv52ji8ycfj4SDX4gJXS7YY3dA4R',
    DASH: 'B3uGHFRpSUuGEDWjqB9LWWxafQj8VTvpMucEyoxzws5H',
    DUXPLORER: 'usUeJwSpvghP5FR6jE9X4fUJbgXyxXnAezSgbzoMA8K',
    EAST: '3UHgFQECoynwC3iunYBnbhzmcCzC5gVnVZMv8Yw1bneK',
    EFYT: '725Yv9oceWsB4GsYwyy4A52kEwyVrL5avubkeChSnL46',
    EGG: 'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS',
    EGGMOON: 'J3dRSWWyRoX55YuuXQhBa2uZ4bUczkqSFC94VZeCoWKA',
    EGGPOINT: '6pHc1PyBcXyS74eBEo95V3ecQvhAypL9RfsUUKtHDUq2',
    EGGSEGGS: 'E4cL4MDRTPz9Wo1hHkxQv4ZzpxVL5136JVaki4wGz2QZ',
    ENDO: '6muMrLavuvuSZXgy1cQrvYm92rGbprNXGdj6Bg7HAtTV',
    ENNO: '7LMV3s1J4dKpMQZqge5sKYoFkZRLojnnU49aerqos4yg',
    ERG: '5dJj4Hn9t2Ve3tRpNGirUHy4yBK6qdJRAJYV21yPPuGz',
    ETH: '474jTeYx2r2Va35794tCScAXWJG9hU2HcgxzMowaZUnu',
    EUR: 'Gtb1WRznfchDnTh37ezoDTJ4wcoKaRsKqKjJjy7nm2zU',
    EURN: 'DUk2YTxhRoAqMJLus4G2b3fR8hMHVh6eiyFx5r29VR6t',
    FL: 'Crpz6B3cbntgAtb6G7WtZb6ArdifE3QypdxpbaofwKVd',
    FTM: '4GZH8rk5vDmMXJ81Xqfm3ovFaczqMnQ11r7aELiNxWBV',
    FOMO: 'J4iWJS2kGmAqLC4dYFuHvmqXK1E6rBJaRTA6nd1VmFkj',
    FORKLOG: '4q9KXJCi9ZbmhttXuLRabd9epgpvowVuyKDuuNdkahdC',
    KOLKHOZ: 'BwCk5zUMTuYtFFu3euo3g6Fwdk7TALrr5C8wvdzps8R5',
    LINK: '2bbGhKo5C31iEiB4CwGuqMYwjD7gCA9eXmm51fe2v8vT',
    LTC: 'HZk1mbfuJpmxU1Fs4AX5MWLVYtctsNcg6e2C6VKqK8zk',
    MARVIN: '6xxMPcvHneBvZk7p82oUdQw4J3F9bsFgtm7YYXQSEDxb',
    MATH: 'FPzcaiEjyG6syoXLY1aghWdPwExvRezGbPXjmL3Gcofw',
    MATIC: 'HcHacFH51pY91zjJa3ZiUVWBww54LnsL4EP3s7hVGo9L',
    MUNA: 'eCNH1aqUnocub8PbNsxLNvZWGeVE98L2Crw3cGY6Gq2',
    MUNDO: '2x8vsNgrBgLq9GWpnTNSVXTGq3cMLSvWWepR8CX36fVZ',
    NGNT: 'H6CwbwXMRKRw6jb1dRUMVs2N6Sdg2wQcXPRaRkjZSjYU',
    NSBT: '6nSpVyNH7yM69eg446wrQR94ipbbcmZMU1ENPwanC97g',
    PESOLATINO: '5JQ8yUY4vnB19s4bXSGVYsNEyA9Bag6jbMtVEgFHvYM7',
    PUZZLE: 'HEB8Qaw9xrWpWs8tHsiATYGBWDBtP2S7kcPALrMu43AS',
    RACE: 'D4TPjtzpsDEJFS1pUAkvh1tJJJMNWGcSrds9sveBoQka',
    SCONEX: 'EnBAWjayxUrwL7KMTBvRzcS5RqGYwFfLPD4tFVu4Mpj3',
    SHEG: 'A2hcw6RV23Fc8Y8FNfV35Sq5QeS9Tgp6n8hbrESiRvXX',
    SHIB: 'GVxGPBtgVWMW1wHiFnfaCakbJ6sKgZgowJgW5Dqrd7JH',
    SIGN: '9sQutD5HnRvjM1uui5cVC4w9xkMPAfYEV8ymug3Mon2Y',
    sNSBT: '8wUmN9Y15f3JR4KZfE81XLXpkdgwnqoBNG6NmocZpKQx',
    sNSBT_TCI: '4CDoUKSAtLTwVTpdxFu6EcbafiCDZUSBXrWGjrAcCPoL',
    STREET: 'DAGQvqQg4F5YTQCQ5JFaVJdZEVoTvecuw2W9ybL5P1hR',
    SWOP: 'Ehie5xYpeN8op1Cctc6aGUrqx8jq3jtf1DSjXDbfm7aT',
    TN: 'bPWkA3MNyEr1TuDchWgdpqJZhGhfPXj7dJdr3qiW2kD',
    TRY: '2mX5DzVKWrAJw8iwdJnV2qtoeVG9h5nTDpTqC1wb1WEN',
    TSN: '8t4DPWTwPzpatHA9AkTxWAB47THnYzBsDnoY7fQqbG91',
    TURTLE: '9mFbBseP3RSC2veLrBgiLJMXDjahwBiH44WnqMfdkgid',
    UNI: '4YmM7mj3Av4DPvpNpbtK4jHbpzYDcZuY6UUnYpqTbzLj',
    USDAP: 'CsUiySsn7Sq747qG9vT1vtqfZNecheSyUpFeAHGMxQCM',
    USDC: '6XtHjpXbs9RRJP2Sr9GUyVqzACcby9TkThHXnjVC5CDJ',
    USDCLP: 'CrjhbC9gRezwvBZ1XwPQqRwx4BWzoyMHGFNUVdn22ep6',
    USDTLP: '9AT2kEi8C4AYxV1qKxtQTVpD5i54jCPvaNNRP6VzRtYZ',
    USDN: 'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p',
    USDT: '34N9YcEETLWn93qYQ64EsP1x89tSruJU44RrEMSXXEPJ',
    VIRES: 'DSbbhLsSTeDg5Lsiufk2Aneh3DjVqJuPr2M9uU1gwy5p',
    VIRES_USDC_LP: 'FSRHtSyXRXQjzQLRtmaqFpBDDCNjY8PU8KNtwoGXVBmr',
    VIRES_USDT_LP: '2tVLdi5fQXk2JcuDAojhctnDp5B5PZhNMyj5GUpeC3tZ',
    WCT: 'DHgwrRvVyqJsepd32YbBqUeDH4GJ1N984X8QoekjgH8J',
    WEST: '4LHHvYGNKJUg5hj65aGD5vgScvCBmLpdRFtjokvCjSL8',
    WNET: 'AxAmJaro7BJ4KasYiZhw7HkjwgYtt2nekPuF2CN9LMym',
    WX: 'Atqv59EYzjFGuitKVnMRk6H8FukjoV3ktPorbEys25on',
    XMR: '5WvPKSJXzVE2orvbkJ8wsQmmQKqTv9sGBPksV4adViw3',
    YFI: 'BLRxWVJWaVuR2CsCoTvTw2bDZ3sQLeTbCofcJv7dP5J4',
    ZEC: 'BrjUWjndUanm5VsJkbUip8VRYy6LWJePtxya3FNv4TQa',
  },
  testnet: {
    WAVES: 'WAVES',
    BTC: 'iHTVbu8ArLhtdtJ8BQhyaomgVogSfXT45RtwNFiK4We',
    DASH: '13mWHq1h58WRTiRNBqDRD63gsV8Hq4joxYQzH3iRdHiR',
    EGG: 'Gp75gygbc1woJMheDomSY1ULyaRVGVEWS64wNWfvncyg',
    ETH: '8Ye7AVyY8TgWbNfQdriLRCBGEPXTb5T48EeBgJTQADNs',
    EURN: 'ECBCkHS68DckpBrzLeoRgYbFg7sCVqR176mPqbXsj9pA',
    LTC: 'Ea5Y9FAfV3MRL2yQHbQXZvjjWtCJ8gvjYcBCfMTaT7TG',
    NSBT: '36mg8NZTaFRDygiVwb8uBnLR51hetJruUCZcxhaVcHj9',
    RACE: 'CzfHm2WKdQoKQeGfosLsmKd6kAcuxHMsjjm9M7c1FUtg',
    SWOP: '2HAJrwa8q4SxBx9cHYaBTQdBjdk5wwqdof7ccpAx2uhZ',
    USDN: '8UrfDVd5GreeUwm7uPk7eYz1eMv376kzR52C6sANPkwS',
    USDT: 'Had29UYhBkBGa7r1gu5ktr3okMz4e8vWPXzxTXNJUF6H',
    XMR: 'Eox8Cb2cfkFrsYMJSN8TmyfqzbqwjQp4sdJDE6PA9hph',
    ZEC: 'DeiUipcLutVxVVuHxpU8QUZos6KZpnrxakku5YpZSBaT',
  },
  stagenet: {
    WAVES: 'WAVES',
  },
  custom: {
    WAVES: 'WAVES',
  },
};

export const swappableAssetTickersByVendor: Record<SwapVendor, Set<string>> = {
  [SwapVendor.Keeper]: new Set([
    'WAVES',
    'BAG',
    'BTC',
    'BUSD',
    'CRV',
    'EAST',
    'EGG',
    'ENNO',
    'ERG',
    'ETH',
    'EURN',
    'FL',
    'LTC',
    'MUNA',
    'NGNT',
    'NSBT',
    'PUZZLE',
    'RACE',
    'SCONEX',
    'SIGN',
    'SWOP',
    'TN',
    'TSN',
    'USDAP',
    'USDC',
    'USDCLP',
    'USDTLP',
    'USDN',
    'USDT',
    'VIRES',
    'WCT',
    'WEST',
    'WX',
    'XMR',
  ]),
  [SwapVendor.Puzzle]: new Set([
    'WAVES',
    'BNB',
    'BTC',
    'CGU',
    'DAI',
    'DUXPLORER',
    'EAST',
    'EGG',
    'EGGMOON',
    'EGGPOINT',
    'EGGSEGGS',
    'ENDO',
    'ENNO',
    'ETH',
    'EURN',
    'FL',
    'FTM',
    'FOMO',
    'FORKLOG',
    'KOLKHOZ',
    'LINK',
    'LTC',
    'MARVIN',
    'MATH',
    'MATIC',
    'MUNA',
    'MUNDO',
    'NSBT',
    'PESOLATINO',
    'PUZZLE',
    'RACE',
    'SHEG',
    'SHIB',
    'SIGN',
    'sNSBT',
    'sNSBT_TCI',
    'STREET',
    'SWOP',
    'TSN',
    'TURTLE',
    'UNI',
    'USDC',
    'USDN',
    'USDT',
    'VIRES',
    'VIRES_USDC_LP',
    'VIRES_USDT_LP',
    'WCT',
    'WEST',
    'WX',
    'YFI',
  ]),
  [SwapVendor.Swopfi]: new Set([
    'WAVES',
    'BAG',
    'BTC',
    'BUSD',
    'CRV',
    'EAST',
    'EGG',
    'ENNO',
    'ERG',
    'ETH',
    'EURN',
    'FL',
    'LTC',
    'MUNA',
    'NGNT',
    'NSBT',
    'PUZZLE',
    'RACE',
    'SCONEX',
    'SIGN',
    'SWOP',
    'TN',
    'TSN',
    'USDAP',
    'USDC',
    'USDCLP',
    'USDTLP',
    'USDN',
    'USDT',
    'VIRES',
    'WCT',
    'WEST',
    'WX',
    'XMR',
  ]),
};

const swappableAssetTickers = Array.from(
  new Set(
    Object.values(swappableAssetTickersByVendor).flatMap(tickersSet =>
      Array.from(tickersSet)
    )
  )
);

export const swappableAssetIds: Record<NetworkName.Mainnet, string[]> = {
  mainnet: swappableAssetTickers.map(assetName => assetIds.mainnet[assetName]),
};

const logosByName: Record<string, string> = {
  BAG: new URL('./logos/BAG.svg', import.meta.url).toString(),
  BCH: new URL('./logos/BCH.svg', import.meta.url).toString(),
  BNB: new URL('./logos/BNB.svg', import.meta.url).toString(),
  BNT: new URL('./logos/BNT.svg', import.meta.url).toString(),
  BSV: new URL('./logos/BSV.svg', import.meta.url).toString(),
  BUSD: new URL('./logos/BUSD.svg', import.meta.url).toString(),
  BTC: new URL('./logos/BTC.svg', import.meta.url).toString(),
  CGU: new URL('./logos/CGU.webp', import.meta.url).toString(),
  CRV: new URL('./logos/CRV.svg', import.meta.url).toString(),
  DAI: new URL('./logos/DAI.svg', import.meta.url).toString(),
  DASH: new URL('./logos/DASH.svg', import.meta.url).toString(),
  DUXPLORER: new URL('./logos/DUXPLORER.webp', import.meta.url).toString(),
  EAST: new URL('./logos/EAST.svg', import.meta.url).toString(),
  EFYT: new URL('./logos/EFYT.svg', import.meta.url).toString(),
  EGG: new URL('./logos/EGG.svg', import.meta.url).toString(),
  EGGMOON: new URL('./logos/EGGMOON.webp', import.meta.url).toString(),
  EGGPOINT: new URL('./logos/EGGPOINT.webp', import.meta.url).toString(),
  EGGSEGGS: new URL('./logos/EGGSEGGS.webp', import.meta.url).toString(),
  ENDO: new URL('./logos/ENDO.webp', import.meta.url).toString(),
  ENNO: new URL('./logos/ENNO.svg', import.meta.url).toString(),
  ERG: new URL('./logos/ERG.svg', import.meta.url).toString(),
  ETH: new URL('./logos/ETH.svg', import.meta.url).toString(),
  EUR: new URL('./logos/EUR.svg', import.meta.url).toString(),
  EURN: new URL('./logos/EURN.svg', import.meta.url).toString(),
  FL: new URL('./logos/FL.svg', import.meta.url).toString(),
  FTM: new URL('./logos/FTM.svg', import.meta.url).toString(),
  FOMO: new URL('./logos/FOMO.webp', import.meta.url).toString(),
  FORKLOG: new URL('./logos/FORKLOG.webp', import.meta.url).toString(),
  KOLKHOZ: new URL('./logos/KOLKHOZ.webp', import.meta.url).toString(),
  LINK: new URL('./logos/LINK.svg', import.meta.url).toString(),
  LTC: new URL('./logos/LTC.svg', import.meta.url).toString(),
  MARVIN: new URL('./logos/MARVIN.webp', import.meta.url).toString(),
  MATH: new URL('./logos/MATH.webp', import.meta.url).toString(),
  MATIC: new URL('./logos/MATIC.svg', import.meta.url).toString(),
  MUNA: new URL('./logos/MUNA.svg', import.meta.url).toString(),
  MUNDO: new URL('./logos/MUNDO.webp', import.meta.url).toString(),
  NGNT: new URL('./logos/NGNT.svg', import.meta.url).toString(),
  NSBT: new URL('./logos/NSBT.svg', import.meta.url).toString(),
  PESOLATINO: new URL('./logos/PESOLATINO.webp', import.meta.url).toString(),
  PUZZLE: new URL('./logos/PUZZLE.svg', import.meta.url).toString(),
  RACE: new URL('./logos/RACE.svg', import.meta.url).toString(),
  SCONEX: new URL('./logos/SCONEX.svg', import.meta.url).toString(),
  SHEG: new URL('./logos/SHEG.webp', import.meta.url).toString(),
  SHIB: new URL('./logos/SHIB.svg', import.meta.url).toString(),
  SIGN: new URL('./logos/SIGN.svg', import.meta.url).toString(),
  sNSBT: new URL('./logos/sNSBT.webp', import.meta.url).toString(),
  sNSBT_TCI: new URL('./logos/sNSBT_TCI.svg', import.meta.url).toString(),
  STREET: new URL('./logos/STREET.svg', import.meta.url).toString(),
  SWOP: new URL('./logos/SWOP.svg', import.meta.url).toString(),
  TN: new URL('./logos/TN.svg', import.meta.url).toString(),
  TSN: new URL('./logos/TSN.svg', import.meta.url).toString(),
  TRY: new URL('./logos/TRY.svg', import.meta.url).toString(),
  TURTLE: new URL('./logos/TURTLE.webp', import.meta.url).toString(),
  UNI: new URL('./logos/UNI.svg', import.meta.url).toString(),
  USDAP: new URL('./logos/USDAP.svg', import.meta.url).toString(),
  USDC: new URL('./logos/USDC.svg', import.meta.url).toString(),
  USDCLP: new URL('./logos/USDCLP.svg', import.meta.url).toString(),
  USDTLP: new URL('./logos/USDTLP.svg', import.meta.url).toString(),
  USDN: new URL('./logos/USDN.svg', import.meta.url).toString(),
  USDT: new URL('./logos/USDT.svg', import.meta.url).toString(),
  VIRES: new URL('./logos/VIRES.svg', import.meta.url).toString(),
  VIRES_USDC_LP: new URL('./logos/USDC.svg', import.meta.url).toString(),
  VIRES_USDT_LP: new URL('./logos/USDT.svg', import.meta.url).toString(),
  WAVES: new URL('./logos/WAVES.svg', import.meta.url).toString(),
  WCT: new URL('./logos/WCT.svg', import.meta.url).toString(),
  WEST: new URL('./logos/WEST.svg', import.meta.url).toString(),
  WNET: new URL('./logos/WNET.svg', import.meta.url).toString(),
  WX: new URL('./logos/WX.svg', import.meta.url).toString(),
  XMR: new URL('./logos/XMR.svg', import.meta.url).toString(),
  YFI: new URL('./logos/YFI.svg', import.meta.url).toString(),
  ZEC: new URL('./logos/ZEC.svg', import.meta.url).toString(),
};

export const assetLogosByNetwork: Partial<{
  [network: string]: Partial<{
    [assetId: string]: string;
  }>;
}> = Object.fromEntries(
  Object.entries(assetIds).map(([network, nameToIdMap]) => [
    network,
    Object.fromEntries(
      Object.entries(nameToIdMap).map(([name, id]) => [id, logosByName[name]])
    ),
  ])
);
